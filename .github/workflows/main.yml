name: Infrastructure Deployment Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  TF_LOG: INFO
  TERRAFORM_DIR: terraform
  ANSIBLE_DIR: ansible

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Terraform Security Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform
        continue-on-error: true

      - name: Run YAML Lint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: ansible/
        continue-on-error: true

  terraform-plan:
    runs-on: ubuntu-latest
    needs: security-checks
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
          terraform_wrapper: false

      - name: Terraform Format Check
        run: |
          cd $TERRAFORM_DIR
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd $TERRAFORM_DIR
          terraform init

      - name: Terraform Validate
        run: |
          cd $TERRAFORM_DIR
          terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          cd $TERRAFORM_DIR
          terraform plan \
            -var="bucket_name=${{ secrets.BUCKET_NAME }}" \
            -var="ami_id=ami-09b0a86a2c84101e1" \
            -var="key_name=${{ secrets.KEY_NAME }}" \
            -var="admin_ip=${{ secrets.ADMIN_IP }}" \
            -var="environment=${{ github.event.inputs.environment }}" \
            -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ env.TERRAFORM_DIR }}/tfplan
          retention-days: 5

  terraform-apply:
    needs: terraform-plan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Apply
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          terraform apply -auto-approve tfplan

  configure-infrastructure:
    needs: terraform-apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Ansible and Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 botocore requests

      - name: Wait for EC2 Instances
        run: sleep 60

      - name: Run Ansible Playbook
        run: |
          cd ${{ env.ANSIBLE_DIR }}
          ansible-galaxy install -r requirements.yml
          ansible-playbook -i inventory/aws_ec2.yml playbook.yml

      - name: Verify Deployment
        run: |
          cd ${{ env.ANSIBLE_DIR }}
          ansible-playbook -i inventory/aws_ec2.yml monitoring/verify.yml

  notify:
    needs: [terraform-apply, configure-infrastructure]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Success
        if: ${{ success() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "✅ Infrastructure deployment successful! Environment: ${{ github.event.inputs.environment }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify Failure
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "❌ Infrastructure deployment failed! Environment: ${{ github.event.inputs.environment }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
