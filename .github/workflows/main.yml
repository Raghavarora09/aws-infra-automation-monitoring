name: Infrastructure Deployment Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  TF_LOG: INFO
  TERRAFORM_DIR: terraform
  ANSIBLE_DIR: ansible
  PYTHON_VERSION: '3.10'

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Terraform Security Scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform
        continue-on-error: true

      - name: Run YAML Lint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: ansible/
        continue-on-error: true

  terraform-plan:
    runs-on: ubuntu-latest
    needs: security-checks
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"
          terraform_wrapper: false

      - name: Terraform Format Check
        run: |
          cd $TERRAFORM_DIR
          terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd $TERRAFORM_DIR
          terraform init

      - name: Terraform Validate
        run: |
          cd $TERRAFORM_DIR
          terraform validate

      - name: Check Existing Infrastructure
        id: check-infra
        run: |
          cd $TERRAFORM_DIR
          if terraform state list > /dev/null 2>&1; then
            echo "has_infrastructure=true" >> $GITHUB_OUTPUT
          else
            echo "has_infrastructure=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Destroy Existing Infrastructure
        if: steps.check-infra.outputs.has_infrastructure == 'true'
        run: |
          cd $TERRAFORM_DIR
          terraform destroy -auto-approve \
            -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
            -var="aws_secret_key=${{ secrets.AWS_SECRET_KEY }}" \
            -var="bucket_name=${{ secrets.BUCKET_NAME }}" \
            -var="ami_id=ami-09b0a86a2c84101e1" \
            -var="key_name=${{ secrets.KEY_NAME }}" \
            -var="admin_ip=${{ secrets.ADMIN_IP }}" \
            -var="environment=${{ github.event.inputs.environment }}"

      - name: Terraform Plan
        id: plan
        run: |
          cd $TERRAFORM_DIR
          terraform plan \
            -var="aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
            -var="aws_secret_key=${{ secrets.AWS_SECRET_KEY }}" \
            -var="bucket_name=${{ secrets.BUCKET_NAME }}" \
            -var="ami_id=ami-09b0a86a2c84101e1" \
            -var="key_name=${{ secrets.KEY_NAME }}" \
            -var="admin_ip=${{ secrets.ADMIN_IP }}" \
            -var="environment=${{ github.event.inputs.environment }}" \
            -out=tfplan

      - name: Upload Terraform Plan and Lock File
        uses: actions/upload-artifact@v3
        with:
          name: terraform-artifacts
          path: |
            ${{ env.TERRAFORM_DIR }}/tfplan
            ${{ env.TERRAFORM_DIR }}/.terraform.lock.hcl
          retention-days: 5

  terraform-apply:
    needs: terraform-plan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Download Terraform Artifacts
        uses: actions/download-artifact@v3
        with:
          name: terraform-artifacts
          path: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Init
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          terraform init

      - name: Terraform Apply
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          terraform apply -auto-approve tfplan

  configure-infrastructure:
    needs: terraform-apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python Dependencies
        working-directory: ${{ env.ANSIBLE_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install AWS Collection
        run: |
          ansible-galaxy collection install amazon.aws

      - name: Add SSH Key
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create Ansible Config File
        run: |
          echo "[defaults]
          inventory = inventory/aws_ec2.yml
          host_key_checking = False
          timeout = 60
          remote_user = ec2-user
          private_key_file = ~/.ssh/id_rsa

          [ssh_connection]
          ssh_args = -o StrictHostKeyChecking=no -o ControlMaster=auto -o ControlPersist=60s" > ansible/ansible.cfg

      - name: Wait for EC2 Instances
        run: sleep 180

      - name: Run Ansible Playbook
        working-directory: ${{ env.ANSIBLE_DIR }}
        run: |
          ansible-playbook -i inventory/aws_ec2.yml playbook.yml -v
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          ANSIBLE_PYTHON_INTERPRETER: auto_silent

      - name: Notify Failure
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "‚ùå Infrastructure deployment failed! Environment: ${{ github.event.inputs.environment }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
